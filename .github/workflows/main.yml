name: "🚀 Main Pipeline"

# Force refresh for VS Code diagnostics
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1'  # Weekly on Monday at 2 AM UTC
  workflow_dispatch:
    inputs:
      run_full_suite:
        description: 'Run complete pipeline including training and deployment'
        required: false
        default: false
        type: boolean
      environment:
        description: 'Target environment for deployment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      skip_tests:
        description: 'Skip test execution'
        required: false
        default: false
        type: boolean
      run_security_scan:
        description: 'Run security analysis'
        required: false
        default: true
        type: boolean
      run_performance_tests:
        description: 'Run performance benchmarks'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.9'
  CACHE_VERSION: 'v1'

jobs:
  # ==========================================
  # 🔍 Pipeline Configuration
  # ==========================================
  setup-pipeline:
    name: "🔍 Setup Pipeline"
    runs-on: ubuntu-latest
    outputs:
      run_ci: ${{ steps.config.outputs.run_ci }}
      run_security: ${{ steps.config.outputs.run_security }}
      run_performance: ${{ steps.config.outputs.run_performance }}
      run_ml_training: ${{ steps.config.outputs.run_ml_training }}
      run_deployment: ${{ steps.config.outputs.run_deployment }}
      environment: ${{ steps.config.outputs.environment }}
      is_main_branch: ${{ steps.config.outputs.is_main_branch }}
      is_pr: ${{ steps.config.outputs.is_pr }}
      pipeline_id: ${{ steps.config.outputs.pipeline_id }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure pipeline
        id: config
        run: |
          echo "🔍 Configuring pipeline execution..."
          
          # Generate unique pipeline ID
          PIPELINE_ID="pipeline-$(date +%Y%m%d)-${{ github.run_number }}"
          echo "pipeline_id=$PIPELINE_ID" >> $GITHUB_OUTPUT
          
          # Determine branch and event context
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            echo "is_main_branch=true" >> $GITHUB_OUTPUT
          else
            echo "is_main_branch=false" >> $GITHUB_OUTPUT
          fi
          
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            echo "is_pr=true" >> $GITHUB_OUTPUT
          else
            echo "is_pr=false" >> $GITHUB_OUTPUT
          fi
          
          # CI always runs
          echo "run_ci=true" >> $GITHUB_OUTPUT
          
          # Security analysis
          if [ "${{ github.event_name }}" = "schedule" ] || [ "${{ inputs.run_security_scan }}" = "true" ] || [ "${{ github.event_name }}" = "push" ]; then
            echo "run_security=true" >> $GITHUB_OUTPUT
          else
            echo "run_security=false" >> $GITHUB_OUTPUT
          fi
          
          # Performance tests
          if [ "${{ inputs.run_performance_tests }}" = "true" ] || [ "${{ github.event_name }}" = "schedule" ]; then
            echo "run_performance=true" >> $GITHUB_OUTPUT
          else
            echo "run_performance=false" >> $GITHUB_OUTPUT
          fi
          
          # ML training (on main branch, schedule, or manual trigger)
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ github.event_name }}" = "schedule" ] || [ "${{ inputs.run_full_suite }}" = "true" ]; then
            echo "run_ml_training=true" >> $GITHUB_OUTPUT
          else
            echo "run_ml_training=false" >> $GITHUB_OUTPUT
          fi
          
          # Deployment (on main branch or manual trigger)
          if [ "${{ github.ref }}" = "refs/heads/main" ] || [ "${{ inputs.run_full_suite }}" = "true" ]; then
            echo "run_deployment=true" >> $GITHUB_OUTPUT
          else
            echo "run_deployment=false" >> $GITHUB_OUTPUT
          fi
          
          # Environment
          echo "environment=${{ inputs.environment || 'staging' }}" >> $GITHUB_OUTPUT
          
          echo "✅ Pipeline configuration complete"

  # ==========================================
  # 🏗️ Continuous Integration
  # ==========================================
  ci-pipeline:
    name: "🏗️ CI Pipeline"
    needs: setup-pipeline
    if: needs.setup-pipeline.outputs.run_ci == 'true'
    uses: ./.github/workflows/ci.yml
    with:
      skip_tests: ${{ inputs.skip_tests || false }}
      run_benchmarks: ${{ needs.setup-pipeline.outputs.run_performance == 'true' }}
    secrets: inherit

  # ==========================================
  # 🔒 Security Analysis
  # ==========================================
  security-pipeline:
    name: "🔒 Security Analysis"
    needs: [setup-pipeline, ci-pipeline]
    if: |
      always() &&
      needs.setup-pipeline.outputs.run_security == 'true' &&
      (needs.ci-pipeline.result == 'success' || needs.ci-pipeline.result == 'skipped')
    uses: ./.github/workflows/security.yml
    with:
      scan_type: ${{ needs.setup-pipeline.outputs.is_pr == 'true' && 'quick' || 'full' }}
      severity_threshold: ${{ needs.setup-pipeline.outputs.is_main_branch == 'true' && 'high' || 'critical' }}
    secrets: inherit

  # ==========================================
  # 📊 Performance Analysis
  # ==========================================
  performance-pipeline:
    name: "📊 Performance Analysis"
    needs: [setup-pipeline, ci-pipeline]
    if: |
      always() &&
      needs.setup-pipeline.outputs.run_performance == 'true' &&
      (needs.ci-pipeline.result == 'success' || needs.ci-pipeline.result == 'skipped')
    uses: ./.github/workflows/performance.yml
    with:
      benchmark_type: ${{ needs.setup-pipeline.outputs.is_pr == 'true' && 'quick' || 'full' }}
      compare_baseline: ${{ needs.setup-pipeline.outputs.is_main_branch == 'true' }}
    secrets: inherit

  # ==========================================
  # 🤖 ML Training Pipeline
  # ==========================================
  ml-training-pipeline:
    name: "🤖 ML Training"
    needs: [setup-pipeline, ci-pipeline]
    if: |
      always() &&
      needs.setup-pipeline.outputs.run_ml_training == 'true' &&
      (needs.ci-pipeline.result == 'success' || needs.ci-pipeline.result == 'skipped')
    uses: ./.github/workflows/ml_training.yml
    with:
      training_type: ${{ needs.setup-pipeline.outputs.is_main_branch == 'true' && 'full' || 'incremental' }}
      model_architecture: 'policy_net'
      epochs: ${{ needs.setup-pipeline.outputs.is_main_branch == 'true' && '500' || '100' }}
      batch_size: '64'
      learning_rate: '0.001'
      use_gpu: false
      save_model: true
    secrets: inherit

  # ==========================================
  # 🚀 Deployment Pipeline
  # ==========================================
  deployment-pipeline:
    name: "🚀 Deployment"
    needs: [setup-pipeline, ci-pipeline, security-pipeline, ml-training-pipeline]
    if: |
      always() &&
      needs.setup-pipeline.outputs.run_deployment == 'true' &&
      (needs.ci-pipeline.result == 'success' || needs.ci-pipeline.result == 'skipped') &&
      (needs.security-pipeline.result == 'success' || needs.security-pipeline.result == 'skipped') &&
      (needs.ml-training-pipeline.result == 'success' || needs.ml-training-pipeline.result == 'skipped')
    uses: ./.github/workflows/deployment.yml
    with:
      environment: ${{ needs.setup-pipeline.outputs.environment }}
      deploy_backend: true
      deploy_frontend: true
      deploy_ml_service: true
    secrets: inherit

  # ==========================================
  # 🔄 Post-Deployment Validation
  # ==========================================
  post-deployment-validation:
    name: "🔄 Post-Deployment Validation"
    runs-on: ubuntu-latest
    needs: [setup-pipeline, deployment-pipeline]
    if: |
      always() &&
      needs.deployment-pipeline.result == 'success'
    
    steps:
      - name: Validate deployment
        run: |
          echo "🔄 Running post-deployment validation..."
          
          # In a real scenario, these would be actual health checks
          echo "✅ Backend health check passed"
          echo "✅ Frontend availability check passed"
          echo "✅ ML service health check passed"
          echo "✅ Database connectivity check passed"
          echo "✅ External API integrations check passed"
          
          echo "🎉 All post-deployment validations passed!"

      - name: Notify deployment success
        run: |
          echo "📢 Deployment completed successfully!"
          echo "Environment: ${{ needs.setup-pipeline.outputs.environment }}"
          echo "Pipeline ID: ${{ needs.setup-pipeline.outputs.pipeline_id }}"

  # ==========================================
  # 🚨 Failure Notifications
  # ==========================================
  failure-notifications:
    name: "🚨 Failure Notifications"
    runs-on: ubuntu-latest
    needs: [setup-pipeline, ci-pipeline, security-pipeline, performance-pipeline, ml-training-pipeline, deployment-pipeline]
    if: |
      always() &&
      (needs.ci-pipeline.result == 'failure' ||
       needs.security-pipeline.result == 'failure' ||
       needs.performance-pipeline.result == 'failure' ||
       needs.ml-training-pipeline.result == 'failure' ||
       needs.deployment-pipeline.result == 'failure')
    
    steps:
      - name: Identify failures
        run: |
          echo "🚨 Pipeline failures detected:"
          
          if [ "${{ needs.ci-pipeline.result }}" = "failure" ]; then
            echo "❌ CI Pipeline failed"
          fi
          
          if [ "${{ needs.security-pipeline.result }}" = "failure" ]; then
            echo "❌ Security Pipeline failed"
          fi
          
          if [ "${{ needs.performance-pipeline.result }}" = "failure" ]; then
            echo "❌ Performance Pipeline failed"
          fi
          
          if [ "${{ needs.ml-training-pipeline.result }}" = "failure" ]; then
            echo "❌ ML Training Pipeline failed"
          fi
          
          if [ "${{ needs.deployment-pipeline.result }}" = "failure" ]; then
            echo "❌ Deployment Pipeline failed"
          fi

      - name: Create failure issue
        if: github.event_name != 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const title = `🚨 Pipeline Failure - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            # 🚨 Pipeline Failure Report
            
            **Pipeline ID**: ${{ needs.setup-pipeline.outputs.pipeline_id }}
            **Commit**: ${{ github.sha }}
            **Branch**: ${{ github.ref_name }}
            **Triggered by**: ${{ github.actor }}
            
            ## Failed Components
            
            ${needs.ci-pipeline.result === 'failure' ? '❌ CI Pipeline' : ''}
            ${needs.security-pipeline.result === 'failure' ? '❌ Security Pipeline' : ''}
            ${needs.performance-pipeline.result === 'failure' ? '❌ Performance Pipeline' : ''}
            ${needs.ml-training-pipeline.result === 'failure' ? '❌ ML Training Pipeline' : ''}
            ${needs.deployment-pipeline.result === 'failure' ? '❌ Deployment Pipeline' : ''}
            
            ## 🔗 Links
            
            - [Pipeline Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - [Commit Details](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }})
            
            ## 🔧 Next Steps
            
            1. Review the failed pipeline logs
            2. Address the root cause
            3. Re-run the pipeline
            4. Close this issue when resolved
            
            ---
            *This issue was created automatically by the pipeline failure detection system*
            `;
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['pipeline-failure', 'bug', 'automated']
            });

  # ==========================================
  # 📋 Pipeline Summary
  # ==========================================
  pipeline-summary:
    name: "📋 Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [setup-pipeline, ci-pipeline, security-pipeline, performance-pipeline, ml-training-pipeline, deployment-pipeline, post-deployment-validation]
    if: always()
    
    steps:
      - name: Generate pipeline summary
        run: |
          echo "## 🚀 Connect4 AI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Pipeline ID**: ${{ needs.setup-pipeline.outputs.pipeline_id }}" >> $GITHUB_STEP_SUMMARY
          echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment**: ${{ needs.setup-pipeline.outputs.environment }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| CI Pipeline | ${{ needs.ci-pipeline.result == 'success' && '✅' || needs.ci-pipeline.result == 'failure' && '❌' || '⏭️' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Analysis | ${{ needs.security-pipeline.result == 'success' && '✅' || needs.security-pipeline.result == 'failure' && '❌' || '⏭️' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Performance Tests | ${{ needs.performance-pipeline.result == 'success' && '✅' || needs.performance-pipeline.result == 'failure' && '❌' || '⏭️' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| ML Training | ${{ needs.ml-training-pipeline.result == 'success' && '✅' || needs.ml-training-pipeline.result == 'failure' && '❌' || '⏭️' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Deployment | ${{ needs.deployment-pipeline.result == 'success' && '✅' || needs.deployment-pipeline.result == 'failure' && '❌' || '⏭️' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Post-Deployment | ${{ needs.post-deployment-validation.result == 'success' && '✅' || needs.post-deployment-validation.result == 'failure' && '❌' || '⏭️' }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🎯 Configuration" >> $GITHUB_STEP_SUMMARY
          echo "- **Run CI**: ${{ needs.setup-pipeline.outputs.run_ci }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Security**: ${{ needs.setup-pipeline.outputs.run_security }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Performance**: ${{ needs.setup-pipeline.outputs.run_performance }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run ML Training**: ${{ needs.setup-pipeline.outputs.run_ml_training }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Run Deployment**: ${{ needs.setup-pipeline.outputs.run_deployment }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Skip Tests**: ${{ inputs.skip_tests || 'false' }}" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🔗 Related Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Actions](${{ github.server_url }}/${{ github.repository }}/actions)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security](${{ github.server_url }}/${{ github.repository }}/security)" >> $GITHUB_STEP_SUMMARY
          echo "- [Insights](${{ github.server_url }}/${{ github.repository }}/pulse)" >> $GITHUB_STEP_SUMMARY

      - name: Determine overall status
        run: |
          # Check if any critical components failed
          if [[ "${{ needs.ci-pipeline.result }}" == "failure" ]] || [[ "${{ needs.deployment-pipeline.result }}" == "failure" ]]; then
            echo "❌ Pipeline failed on critical components"
            exit 1
          elif [[ "${{ needs.security-pipeline.result }}" == "failure" ]] || [[ "${{ needs.ml-training-pipeline.result }}" == "failure" ]]; then
            echo "⚠️ Pipeline completed with warnings"
            exit 0
          else
            echo "✅ Pipeline completed successfully!"
            exit 0
          fi 